-- Создание схемы
CREATE SCHEMA university;

-- Создание таблиц
CREATE TABLE university.faculty (
	id SERIAL PRIMARY KEY,
	name VARCHAR(50) NOT NULL,
	cost DECIMAL(8,2) NOT NULL
);

CREATE TABLE university.course (
	id SERIAL PRIMARY KEY, 
	number INTEGER NOT NULL,
	id_faculty INTEGER REFERENCES university.faculty(id)
);

CREATE TABLE university.student (
	id SERIAL PRIMARY KEY, 
	firstName VARCHAR(50) NOT NULL,
	secondName VARCHAR(50) NOT NULL,
	middleName VARCHAR(50),
	budget BOOLEAN NOT NULL, 
	id_course INTEGER REFERENCES university.course(id)
);

-- Создание факультетов
INSERT INTO university.faculty (name, cost)
VALUES ('Инженерный', 30000)

INSERT INTO university.faculty (name, cost)
VALUES ('Экономический', 49000)

-- Создание курсов
INSERT INTO university.course (number, id_faculty)
VALUES (1, 1)

INSERT INTO university.course (number, id_faculty)
VALUES (1, 2)

INSERT INTO university.course (number, id_faculty)
VALUES (4, 2)

-- Создание учеников
INSERT INTO university.student (secondname, firstname, middlename, id_course, budget)
VALUES ('Петров', 'Петр', 'Петрович', 1, true)

INSERT INTO university.student (secondname, firstname, middlename, id_course, budget)
VALUES ('Иванов', 'Иван', 'Иванович', 1, false)	

INSERT INTO university.student (secondname, firstname, middlename, id_course, budget)
VALUES ('Михно', 'Иван', 'Иваныч', 3, true)

INSERT INTO university.student (secondname, firstname, middlename, id_course, budget)
VALUES ('Стоцкая', 'Ирина', 'Юрьевна', 3, false)

INSERT INTO university.student (secondname, firstname, middlename, id_course, budget)
VALUES ('Младич', 'Настасья', null, 3, false)	

-- 1. Вывести всех студентов, кто платит больше 30_000.
SELECT (firstname, secondname, middlename) FROM university.faculty fa
	JOIN university.course co
	ON fa.id = co.id_faculty
	JOIN university.student st
	ON co.id = st.id_course
	WHERE cost > 30000 and budget = false

-- 2. Перевести всех студентов Петровых на 1 курс экономического факультета.
UPDATE university.student  SET id_course = 2
WHERE secondname = 'Петров'

-- 3. Вывести всех студентов без отчества или фамилии.
SELECT * from university.student 
WHERE middlename IS NULL OR secondname IS NULL

-- 4. Вывести всех студентов содержащих в фамилии или в имени или в отчестве "ван".
SELECT * from university.student 
WHERE secondname LIKE '%ван%'
OR firstname LIKE '%ван%'
OR middlename LIKE '%ван%'

-- 5. Удалить все записи из всех таблиц.
DELETE FROM university.student
DELETE FROM university.course
DELETE FROM university.faculty
